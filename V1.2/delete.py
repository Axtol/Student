#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.3
#  in conjunction with Tcl version 8.6
#    Jun 05, 2022 06:36:47 PM CST  platform: Windows NT

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter import *
from tkinter import filedialog, messagebox
import pickle
import shutil

import delete_support


def dir_open():
    fd = filedialog.asksaveasfilename(filetypes=[('哈希表文件', (".htf", ".hash")), ("哈希表数据库", (".hst", ".hdb")), ("所有文件", "*.*")])
    if fd == "":
        if messagebox.askretrycancel(title="文件错误", message="我们在打开文件时遇到错误。\n原因：未选择"):
            dir_open()
        else:
            raise
    else:
        return fd


class Toplevel1:
    def __init__(self, top=None, file=""):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        self.file = file
        self.varList = StringVar()

        top.geometry("600x450+660+210")
        top.minsize(120, 1)
        top.maxsize(1924, 1061)
        top.resizable(1,  1)
        top.title("删除")
        top.configure(background="#d9d9d9")

        self.top = top

        self.sb = Scrollbar(self.top)
        self.sb.place(relx=0.97, rely=0.267, relheight=0.733, relwidth=0.03)

        self.TSeparator1 = ttk.Separator(self.top)
        self.TSeparator1.place(relx=0.0, rely=0.267,  relwidth=1.0)

        self.Listbox1 = tk.Listbox(self.top)
        self.Listbox1.place(relx=0.0, rely=0.267, relheight=0.733
                , relwidth=0.97)
        self.Listbox1.configure(background="white")
        self.Listbox1.configure(disabledforeground="#a3a3a3")
        self.Listbox1.configure(font="TkFixedFont")
        self.Listbox1.configure(foreground="#000000")
        self.Listbox1.configure(yscrollcommand=self.sb.set)
        self.sb.configure(command=self.Listbox1.yview)

        self.Label1 = tk.Label(self.top)
        self.Label1.place(relx=0.37, rely=0.022, height=23, width=117)
        self.Label1.configure(anchor='w')
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(compound='left')
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(text='''选择元素以进行删除。''')

        self.Message1 = tk.Message(self.top)
        self.Message1.place(relx=0.017, rely=0.067, relheight=0.091
                , relwidth=0.945)
        self.Message1.configure(background="#d9d9d9")
        self.Message1.configure(foreground="#000000")
        self.Message1.configure(highlightbackground="#d9d9d9")
        self.Message1.configure(highlightcolor="black")
        self.Message1.configure(padx="1")
        self.Message1.configure(pady="1")
        self.Message1.configure(text='''请注意：如果你没有备份数据，那么删除了之后就不可能找回来！
我们不希望出现这种情况。所以，请千万做好备份！''')
        self.Message1.configure(width=567)

        self.Button1 = tk.Button(self.top)
        self.Button1.place(relx=0.017, rely=0.156, height=38, width=169)
        self.Button1.configure(activebackground="#ececec")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#d9d9d9")
        self.Button1.configure(compound='left')
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''备份数据''', command=self.bei_feng)

        self.Button1_1 = tk.Button(self.top)
        self.Button1_1.place(relx=0.7, rely=0.156, height=38, width=169)
        self.Button1_1.configure(activebackground="#ececec")
        self.Button1_1.configure(activeforeground="#000000")
        self.Button1_1.configure(background="#d9d9d9")
        self.Button1_1.configure(compound='left')
        self.Button1_1.configure(disabledforeground="#a3a3a3")
        self.Button1_1.configure(foreground="#000000")
        self.Button1_1.configure(highlightbackground="#d9d9d9")
        self.Button1_1.configure(highlightcolor="black")
        self.Button1_1.configure(pady="0")
        self.Button1_1.configure(text='''删除数据''', command=self.delete)

        self.Label2 = tk.Label(self.top)
        self.Label2.place(relx=0.35, rely=0.178, height=23, width=187)
        self.Label2.configure(activeforeground="#0000ff")
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(compound='left')
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(font="-family {Microsoft YaHei UI} -size 9 -slant italic -underline 1")
        self.Label2.configure(foreground="#0000ff")
        self.Label2.configure(text='''获取和“删除”有关的帮助''')

        with open(self.file, "rb") as f:
            tabel = pickle.load(f)
        for i in tabel.values():
            self.Listbox1.insert(END, i)

    def delete(self):
        with open(self.file, "rb") as f:
            tabel = pickle.load(f)
        sec = self.Listbox1.get(self.Listbox1.curselection())
        rs = eval(sec)
        print(sec)
        print(rs)
        print(type(rs))
        if rs in list(tabel.values()):
            res = list(tabel.keys())[list(tabel.values()).index(rs)]
        else:
            res = None
        del tabel[res]
        with open(self.file, "wb") as f:
            pickle.dump(tabel, f)

    def bei_feng(self):
        new_dir = dir_open()
        shutil.copy(self.file, new_dir)


def start_up():
    delete_support.main()


if __name__ == '__main__':
    delete_support.main()
