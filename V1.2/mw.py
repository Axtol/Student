#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.3
#  in conjunction with Tcl version 8.6
#    Jun 04, 2022 03:57:15 PM CST  platform: Windows NT
import _pickle
import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter import *
from tkinter import messagebox
import pickle
import webbrowser
import datetime

import delete as d   # 删除模块
import insert   # 插入模块
import mw_support


def open_url():
    webbrowser.open("https://github.com/Axtol/Student")


def non_insert():
    messagebox.showerror(message="该版本暂不支持插入。请前往代码仓库查看1.0版本。", title="不支持")
    open_url()


class Toplevel1:
    def __init__(self, top=None, hash_file=None):
        """This class configures and populates the toplevel window.
           top is the toplevel containing window."""
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.', background=_bgcolor)
        self.style.configure('.', foreground=_fgcolor)
        self.style.configure('.', font="TkDefaultFont")
        self.style.map('.', background=[('selected', _compcolor), ('active', _ana2color)])

        self.path = hash_file

        top.geometry("800x599+546+133")
        top.minsize(120, 1)
        top.maxsize(1924, 1061)
        top.resizable(1, 1)
        top.title("学生管理系统-ui1.2")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        f = open(str(hash_file), "rb")
        try:
            self.tabel = pickle.load(f)     # 加载文件
        except _pickle.UnpicklingError:
            if messagebox.askretrycancel(title="文件错误", message="我们在打开文件时遇到错误。\n原因:格式错误"):
                raise
            else:
                raise
        finally:
            f.close()

        self.top = top
        self.combobox = tk.StringVar()
        self.combobox.set("none")

        self.Labelframe1 = tk.LabelFrame(self.top)
        self.Labelframe1.place(relx=0.0, rely=0.0, relheight=0.357, relwidth=1.0)

        self.Labelframe1.configure(relief='groove')
        self.Labelframe1.configure(foreground="black")
        self.Labelframe1.configure(text='''功能界面''')
        self.Labelframe1.configure(background="#d9d9d9")
        self.Labelframe1.configure(highlightbackground="#d9d9d9")
        self.Labelframe1.configure(highlightcolor="black")

        self.Label1 = tk.Label(self.Labelframe1)
        self.Label1.place(relx=0.013, rely=0.093, height=33, width=140
                          , bordermode='ignore')
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(anchor='w')
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(compound='left')
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''查询系统：查询ID 输入：''')

        self.Spinbox1 = tk.Spinbox(self.Labelframe1, from_=10000000, to=99999999)
        self.Spinbox1.place(relx=0.188, rely=0.117, relheight=0.098
                            , relwidth=0.195, bordermode='ignore')
        self.Spinbox1.configure(activebackground="#f9f9f9")
        self.Spinbox1.configure(background="white")
        self.Spinbox1.configure(buttonbackground="#d9d9d9")
        self.Spinbox1.configure(disabledforeground="#a3a3a3")
        self.Spinbox1.configure(font="TkDefaultFont")
        self.Spinbox1.configure(foreground="black")
        self.Spinbox1.configure(highlightbackground="black")
        self.Spinbox1.configure(highlightcolor="black")
        self.Spinbox1.configure(insertbackground="black")
        self.Spinbox1.configure(selectbackground="blue")
        self.Spinbox1.configure(selectforeground="white")

        self.TSeparator1 = ttk.Separator(self.Labelframe1)
        self.TSeparator1.place(relx=0.405, rely=0.266, relwidth=0.598
                               , bordermode='ignore')

        self.Label3 = tk.Label(self.Labelframe1)
        self.Label3.place(relx=0.413, rely=0.107, height=23, width=68
                          , bordermode='ignore')
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(activeforeground="black")
        self.Label3.configure(anchor='w')
        self.Label3.configure(background="#d9d9d9")
        self.Label3.configure(compound='left')
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(highlightbackground="#d9d9d9")
        self.Label3.configure(highlightcolor="black")
        self.Label3.configure(text='''删除&新建''')

        self.Button1 = tk.Button(self.Labelframe1)
        self.Button1.place(relx=0.5, rely=0.098, height=28, width=49
                           , bordermode='ignore')
        self.Button1.configure(activebackground="#ececec")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#d9d9d9")
        self.Button1.configure(compound='left')
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''删除''', command=self.delete)

        self.Button2 = tk.Button(self.Labelframe1)
        self.Button2.place(relx=0.575, rely=0.098, height=28, width=49
                           , bordermode='ignore')
        self.Button2.configure(activebackground="#ececec")
        self.Button2.configure(activeforeground="#000000")
        self.Button2.configure(background="#d9d9d9")
        self.Button2.configure(compound='left')
        self.Button2.configure(disabledforeground="#a3a3a3")
        self.Button2.configure(foreground="#000000")
        self.Button2.configure(highlightbackground="#d9d9d9")
        self.Button2.configure(highlightcolor="black")
        self.Button2.configure(pady="0")
        self.Button2.configure(text='''新建''', command=non_insert)

        self.Button3 = tk.Button(self.Labelframe1, command=open_url)
        self.Button3.place(relx=0.663, rely=0.093, height=28, width=259
                           , bordermode='ignore')
        self.Button3.configure(activebackground="#ececec")
        self.Button3.configure(activeforeground="#000000")
        self.Button3.configure(background="#d9d9d9")
        self.Button3.configure(compound='left')
        self.Button3.configure(disabledforeground="#a3a3a3")
        self.Button3.configure(foreground="#000000")
        self.Button3.configure(highlightbackground="#d9d9d9")
        self.Button3.configure(highlightcolor="black")
        self.Button3.configure(pady="0")
        self.Button3.configure(text='''源代码URL：https://github.com/Axtol/Student''')

        self.TFrame1 = ttk.Frame(self.Labelframe1)
        self.TFrame1.place(relx=0.404, rely=0.047, relheight=0.958
                           , relwidth=0.001, bordermode='ignore')
        self.TFrame1.configure(relief='groove')
        self.TFrame1.configure(borderwidth="2")
        self.TFrame1.configure(relief="groove")

        self.Label2 = tk.Label(self.Labelframe1)
        self.Label2.place(relx=0.011, rely=0.257, height=23, width=138
                          , bordermode='ignore')
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(anchor='w')
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(compound='left')
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''查询系统：查询名字输入：''')

        self.Entry1 = tk.Entry(self.Labelframe1)
        self.Entry1.place(relx=0.188, rely=0.28, height=17, relwidth=0.193
                          , bordermode='ignore')
        self.Entry1.configure(background="white")
        self.Entry1.configure(disabledforeground="#a3a3a3")
        self.Entry1.configure(font="TkFixedFont")
        self.Entry1.configure(foreground="#000000")
        self.Entry1.configure(highlightbackground="#d9d9d9")
        self.Entry1.configure(highlightcolor="black")
        self.Entry1.configure(insertbackground="black")
        self.Entry1.configure(selectbackground="blue")
        self.Entry1.configure(selectforeground="white")

        self.Label4 = tk.Label(self.Labelframe1)
        self.Label4.place(relx=0.011, rely=0.425, height=23, width=137
                          , bordermode='ignore')
        self.Label4.configure(activebackground="#f9f9f9")
        self.Label4.configure(activeforeground="black")
        self.Label4.configure(anchor='w')
        self.Label4.configure(background="#d9d9d9")
        self.Label4.configure(compound='left')
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(foreground="#000000")
        self.Label4.configure(highlightbackground="#d9d9d9")
        self.Label4.configure(highlightcolor="black")
        self.Label4.configure(text='''查询系统：查询其他条件：''')

        self.TSeparator2 = ttk.Separator(self.Labelframe1)
        self.TSeparator2.place(relx=0.005, rely=0.379, relwidth=0.398
                               , bordermode='ignore')

        first = 0
        for key in self.tabel.items():
            first += key[0]
            break
        self.c = list(self.tabel[int(first)].keys())
        self.TOptMenu1 = OptionMenu(self.Labelframe1, self.combobox, *self.c)
        self.TOptMenu1.place(relx=0.188, rely=0.421, relheight=0.107, relwidth=0.205, bordermode='ignore')

        self.Label5 = tk.Label(self.Labelframe1)
        self.Label5.place(relx=0.013, rely=0.561, height=23, width=68
                          , bordermode='ignore')
        self.Label5.configure(activebackground="#f9f9f9")
        self.Label5.configure(activeforeground="black")
        self.Label5.configure(anchor='w')
        self.Label5.configure(background="#d9d9d9")
        self.Label5.configure(compound='left')
        self.Label5.configure(disabledforeground="#a3a3a3")
        self.Label5.configure(foreground="#000000")
        self.Label5.configure(highlightbackground="#d9d9d9")
        self.Label5.configure(highlightcolor="black")
        self.Label5.configure(text='''查询关键字''')

        self.Entry2 = tk.Entry(self.Labelframe1)
        self.Entry2.place(relx=0.1, rely=0.575, height=17, relwidth=0.293
                          , bordermode='ignore')
        self.Entry2.configure(background="white")
        self.Entry2.configure(disabledforeground="#a3a3a3")
        self.Entry2.configure(font="TkFixedFont")
        self.Entry2.configure(foreground="#000000")
        self.Entry2.configure(highlightbackground="#d9d9d9")
        self.Entry2.configure(highlightcolor="black")
        self.Entry2.configure(insertbackground="black")
        self.Entry2.configure(selectbackground="blue")
        self.Entry2.configure(selectforeground="white")

        self.Label6 = tk.Label(self.Labelframe1)
        self.Label6.place(relx=0.413, rely=0.28, height=153, width=465
                          , bordermode='ignore')
        self.Label6.configure(activebackground="#f9f9f9")
        self.Label6.configure(activeforeground="black")
        self.Label6.configure(anchor='w')
        self.Label6.configure(background="#8080ff")
        self.Label6.configure(compound='left')
        self.Label6.configure(cursor="bogosity")
        self.Label6.configure(disabledforeground="#a3a3a3")
        self.Label6.configure(font="-family {宋体} -size 30")
        self.Label6.configure(foreground="#000000")
        self.Label6.configure(highlightbackground="#d9d9d9")
        self.Label6.configure(highlightcolor="black")
        self.Label6.configure(text='''成绩查询系统V1.2''')

        self.Labelframe2 = tk.LabelFrame(self.top)
        self.Labelframe2.place(relx=0.0, rely=0.367, relheight=0.624
                               , relwidth=0.488)
        self.Labelframe2.configure(relief='groove')
        self.Labelframe2.configure(foreground="black")
        self.Labelframe2.configure(text='''查询结果显示台''')
        self.Labelframe2.configure(background="#d9d9d9")
        self.Labelframe2.configure(highlightbackground="#d9d9d9")
        self.Labelframe2.configure(highlightcolor="black")

        self.Listbox1 = tk.Listbox(self.Labelframe2)
        self.Listbox1.place(relx=0.026, rely=0.053, relheight=0.936
                            , relwidth=0.908, bordermode='ignore')
        self.Listbox1.configure(background="white")
        self.Listbox1.configure(disabledforeground="#a3a3a3")
        self.Listbox1.configure(font="TkFixedFont")
        self.Listbox1.configure(foreground="#000000")

        self.sb = Scrollbar(self.Labelframe2)
        self.sb.place(relx=0.95, rely=0, relheight=1, relwidth=0.05)
        self.sb.configure(command=self.Listbox1.yview)
        self.Listbox1.configure(yscrollcommand=self.sb.set)

        self.Labelframe2_1 = tk.LabelFrame(self.top)
        self.Labelframe2_1.place(relx=0.5, rely=0.367, relheight=0.624
                                 , relwidth=0.5)
        self.Labelframe2_1.configure(relief='groove')
        self.Labelframe2_1.configure(foreground="black")
        self.Labelframe2_1.configure(text='''日志&流程&反馈''')
        self.Labelframe2_1.configure(background="#d9d9d9")
        self.Labelframe2_1.configure(highlightbackground="#d9d9d9")
        self.Labelframe2_1.configure(highlightcolor="black")

        self.Text1 = tk.Text(self.Labelframe2_1)
        self.Text1.place(relx=0.0, rely=0.053, relheight=0.941, relwidth=0.985
                         , bordermode='ignore')
        self.Text1.configure(background="white")
        self.Text1.configure(font="TkTextFont")
        self.Text1.configure(foreground="black")
        self.Text1.configure(highlightbackground="#d9d9d9")
        self.Text1.configure(highlightcolor="black")
        self.Text1.configure(insertbackground="black")
        self.Text1.configure(selectbackground="blue")
        self.Text1.configure(selectforeground="white")
        self.Text1.configure(wrap="word")

        self.Button = Button(self.Labelframe1, text="开始查询", command=self.search)
        self.Button.place(relx=0.013, rely=0.7, height=33, width=210)

        self.Button4 = Button(self.Labelframe1, text="显示结果")
        self.Button4.place(relx=0.22, rely=0.7, height=33, width=140)

        now = datetime.datetime.now()

        self.Text1.insert(END, "initial search module……successful.\n"
                               "initial insert module……successful.\n"
                               "initial display module……successful.\n"
                               "initial hash file……successful.\n"
                               "in\n"
                               f"{str(now.year)}年{str(now.month)}月{str(now.day)}日 {str(now.hour)}:{str(now.minute)}:{str(now.second)}.{str(now.microsecond)}\n"
                               f"hash file long <{len(self.tabel)}>\n")

    def search(self):
        text = self.Entry1.get() if self.combobox.get() == "none" else\
            self.Entry2.get() if self.Spinbox1.get() == "10000000" and self.combobox.get() == "none" else\
            None
        res = ""
        print("a", text)
        print("c", self.Entry1.get())
        print("d", self.Entry2.get())
        now = datetime.datetime.now()
        if self.combobox.get() == "none" and self.Entry1.get():
            res = mw_support.search_key_word(text, self.tabel)
            self.Text1.insert(END, "\ninitial searching……\n"
                                   "searching type <name>\n"
                                   "searching……\n"
                                   "searching successful.\n"
                                   "in\n"
                                   f"{str(now.year)}年{str(now.month)}月{str(now.day)}日 {str(now.hour)}:{str(now.minute)}:{str(now.second)}.{str(now.microsecond)}\n"
                              )
        elif str(self.Spinbox1.get()) != '10000000' and self.Entry1.get() == '' and self.Entry2.get() == '':
            res = mw_support.search_id(int(self.Spinbox1.get()), self.tabel)
            self.Text1.insert(
                END, "\ninitial searching……\n"
                     "searching type <ID search>\n"
                     "searching……\n"
                     "searching successful.\n"
                     "in\n"
                     f"{str(now.year)}年{str(now.month)}月{str(now.day)}日 {str(now.hour)}:{str(now.minute)}:{str(now.second)}.{str(now.microsecond)}\n")
        elif self.combobox.get() != "none" and self.Entry2.get() and self.Entry1.get() == "":
            res = mw_support.search_key_word(text, self.tabel)
            self.Text1.insert(END, "\ninitial searching……\n"
                                   "searching type <keyword>\n"
                                   "searching……\n"
                                   "searching successful.\n"
                                   "in\n"
                                   f"{str(now.year)}年{str(now.month)}月{str(now.day)}日 {str(now.hour)}:{str(now.minute)}:{str(now.second)}.{str(now.microsecond)}\n"
                              )
        print("b", res)
        print("s", self.Spinbox1.get(), type(self.Spinbox1.get()))
        self.Listbox1.insert(END, res)
        self.Spinbox1.setvar('10000010')
        self.Entry1.delete(0, END)
        self.Entry2.delete(0, END)

    def delete(self):
        top = Toplevel()
        d.Toplevel1(top=top, file=self.path)


def start_up():
    mw_support.main()


if __name__ == '__main__':
    mw_support.main()
